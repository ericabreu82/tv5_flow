/*  Copyright (C) 2011-2012 National Institute For Space Research (INPE) - Brazil.

This file is part of the TerraLib - a Framework for building GIS enabled applications.

TerraLib is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License,
or (at your option) any later version.

TerraLib is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with TerraLib. See COPYING. If not, write to
TerraLib Team at <terralib-team@terralib.org>.
*/

/*!
\file fiocruz/src/fiocruz/flow/qt/FlowDiagramDialog.cpp

\brief This file defines the Flow Diagram dialog class
*/

// TerraLib
#include <terralib/graph/builder/FlowGraphBuilder.h>
#include <terralib/graph/core/AbstractGraph.h>
#include <terralib/graph/Globals.h>


#include "FlowDiagramDialog.h"
#include "ui_FlowDiagramDialogForm.h"

// Qt
#include <QMessageBox>


Q_DECLARE_METATYPE(te::map::AbstractLayerPtr);

te::qt::plugins::fiocruz::FlowDiagramDialog::FlowDiagramDialog(QWidget* parent, Qt::WindowFlags f)
: QDialog(parent, f),
m_ui(new Ui::FlowDiagramDialogForm)
{
  // add controls
  m_ui->setupUi(this);

  //connects
  connect(m_ui->m_okPushButton, SIGNAL(released()), this, SLOT(onOkPushButtonClicked()));
}

te::qt::plugins::fiocruz::FlowDiagramDialog::~FlowDiagramDialog()
{

}

void te::qt::plugins::fiocruz::FlowDiagramDialog::setLayerList(std::list<te::map::AbstractLayerPtr> list)
{

}

void te::qt::plugins::fiocruz::FlowDiagramDialog::onOkPushButtonClicked()
{
  std::string shapeFileName = "D:/Workspace/FIOCRUZ/data/flow/Censo_2000_Municipios.shp";
  std::string linkColumn = "cod_munic";
  std::string csvFileName = "D:/Workspace/FIOCRUZ/data/flow/c50mun_rec.csv";
  int fromIdx = 0;
  int toIdx = 1;
  int weightIdx = 2;

  //std::string shapeFileName = "D:/WS/dados/flow/reg.txt_pol.shp";
  //std::string linkColumn = "object_id_";
  //std::string csvFileName = "D:/WS/dados/flow/T_INT_97.csv";
  //int fromIdx = 1;
  //int toIdx = 3;
  //int weightIDx = 5;

  int srid = 4618;

  std::string graphName = "flowMuG";

  // data source information
  std::map<std::string, std::string> connInfo;
  //connInfo["PG_HOST"] = "localhost";
  //connInfo["PG_USER"] = "postgres";
  //connInfo["PG_PASSWORD"] = "tdk696";
  //connInfo["PG_DB_NAME"] = "t5graph";
  //connInfo["PG_CONNECT_TIMEOUT"] = "4";
  //connInfo["PG_CLIENT_ENCODING"] = "LATIN1";

  // graph type
  std::string graphType = te::graph::Globals::sm_graphFactoryDefaultObject;

  // graph information
  std::map<std::string, std::string> graphInfo;
  //graphInfo["GRAPH_DATA_SOURCE_TYPE"] = "POSTGIS";
  //graphInfo["GRAPH_NAME"] = graphName;
  //graphInfo["GRAPH_DESCRIPTION"] = "Generated by Flow Builder.";
  //graphInfo["GRAPH_STORAGE_MODE"] = te::graph::Globals::sm_edgeStorageMode;
  //graphInfo["GRAPH_STRATEGY_LOADER"] = te::graph::Globals::sm_factoryLoaderStrategyTypeSequence;
  //graphInfo["GRAPH_CACHE_POLICY"] = "FIFO";
  graphInfo["GRAPH_DATA_SOURCE_TYPE"] = "MEM";
  graphInfo["GRAPH_NAME"] = graphName;
  graphInfo["GRAPH_DESCRIPTION"] = "Generated by Flow Builder.";

  boost::shared_ptr<te::graph::AbstractGraph> graph;

  try
  {
    te::graph::FlowGraphBuilder* builder = new te::graph::FlowGraphBuilder();

    if (!builder->build(shapeFileName, linkColumn, srid, csvFileName, fromIdx, toIdx, weightIdx, connInfo, graphType, graphInfo))
    {
      //std::cout << std::endl << "An exception has occuried in Graph Example: " << builder->getErrorMessage() << std::endl;
    }

    graph = builder->getGraph();

    delete builder;
  }
  catch (const std::exception& e)
  {
    //std::cout << std::endl << "An exception has occuried in Graph Example: " << e.what() << std::endl;
  }
  catch (...)
  {
    //std::cout << std::endl << "An unexpected exception has occuried in Graph Example!" << std::endl;
  }

  graph->flush();

}
